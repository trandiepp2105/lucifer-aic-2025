version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: aic_mysql
    restart: unless-stopped
    env_file: ./.env
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      # - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - aic_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: aic_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aic_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 20s
      retries: 10

  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: aic_meilisearch
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=production
      - MEILI_LOG_LEVEL=INFO
      - MEILI_DB_PATH=/meili_data
      - MEILI_MAX_INDEXING_MEMORY=1GiB
    mem_limit: 2g
    memswap_limit: 2g
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - aic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7700/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # frontend:
  #   build: ./frontend
  #   container_name: aic_frontend
  #   restart: unless-stopped
  #   expose:
  #     - "3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - REACT_APP_API_ENDPOINT=/api
  #   depends_on:
  #     - nginx
  #   networks:
  #     - aic_network

  nginx:
    image: nginx:alpine
    container_name: aic_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend/staticfiles:/backend/staticfiles:ro
      - ${FRAMES_PATH}:/media/frames:ro
      - ${VIDEOS_PATH}:/media/videos:ro
    depends_on:
      - backend
    networks:
      - aic_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: ./backend
    container_name: aic_backend
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - ./backend:/backend
      - ${HOST_STORAGE_DIR}:${CONTAINER_STORAGE_DIR}:rw
    environment:
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_HOST=mysql
      - DB_PORT=3306
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MEILISEARCH_HOST=meilisearch
      - MEILISEARCH_PORT=7700
      - MEILISEARCH_API_KEY=${MEILI_MASTER_KEY:-masterKey}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SERVER_TYPE=uvicorn  # Use ASGI server for async support
      - CONTAINER_STORAGE_DIR=${CONTAINER_STORAGE_DIR}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    networks:
      - aic_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local

networks:
  aic_network:
    driver: bridge
