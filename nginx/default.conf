upstream backend {
    server backend:8000;
}

# Frontend temporarily disabled
# upstream frontend {
#     server frontend:3000;
# }

server {
    listen 80;
    server_name localhost;
    client_max_body_size 100M;

    # API endpoints - proxy to backend
    location /api/ {
        proxy_pass http://backend/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle WebSocket connections if needed
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Admin interface - proxy to backend  
    location /admin/ {
        proxy_pass http://backend/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve keyframes directly from filesystem
    location /media/frames/ {
        alias /media/frames/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Served-By nginx;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        
        # Handle CORS if needed
        add_header Access-Control-Allow-Origin *;
        
        # Disable autoindex for security
        autoindex off;
        
        # Try to serve file, return 404 if not found
        try_files $uri =404;
    }

    # Serve videos directly from filesystem
    location /media/videos/ {
        alias /media/videos/;
        expires 30d;
        add_header Cache-Control "public";
        add_header X-Served-By nginx;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        
        # CORS headers for video streaming
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, HEAD';
        add_header Access-Control-Allow-Headers 'Range, Content-Range, Content-Length, Accept-Ranges';
        add_header Access-Control-Expose-Headers 'Content-Length, Content-Range, Accept-Ranges';
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, HEAD';
            add_header Access-Control-Allow-Headers 'Range, Content-Range, Content-Length, Accept-Ranges';
            add_header Access-Control-Max-Age 86400;
            add_header Content-Type text/plain;
            add_header Content-Length 0;
            return 204;
        }
        
        # Enable range requests for video streaming
        add_header Accept-Ranges bytes;
        
        # Disable autoindex for security
        autoindex off;
        
        # Try to serve file, return 404 if not found
        try_files $uri =404;
    }

    # Serve Django static files
    location /static/ {
        alias /backend/staticfiles/;
        expires 30d;
        add_header Cache-Control "public";
        add_header X-Served-By nginx;
    }

    location /media/queries/ {
        proxy_pass http://backend/media/queries/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache settings
        expires 30d;
        add_header Cache-Control "public";
        add_header X-Served-By nginx-proxy;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        
        # Handle CORS if needed
        add_header Access-Control-Allow-Origin *;
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Frontend application - TEMPORARILY DISABLED
    # location / {
    #     proxy_pass http://frontend;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     
    #     # Handle WebSocket connections for React dev server
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    # }

    # Default fallback - return 404 for undefined routes when frontend is disabled
    location / {
        return 404 "Frontend service is currently disabled";
        add_header Content-Type text/plain;
    }
}
